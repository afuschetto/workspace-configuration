   RED="\[\033[0;31m\]"
 GREEN="\[\033[0;32m\]"
YELLOW="\[\033[0;33m\]"
  BLUE="\[\033[0;34m\]"
PURPLE="\[\033[0;35m\]"
  NONE="\[\e[0m\]"

__set_prompt() {
    # Set prompt symbol color based on last command status (green if success, red if failure)
    # Note: Do this first to avoid losing the return value of the last command
    local exit_status=$?
    local prompt_symbol
    if [[ $exit_status -eq 0 ]]; then
        prompt_symbol="${GREEN}\$${NONE} "
    else
        prompt_symbol="${RED}\$${NONE} "
    fi

    # Build the base segment (always available)
    local base_color
    if [[ -n $SSH_CONNECTION || -n $SSH_CLIENT ]]; then
        base_color=$RED
    else
        base_color=$GREEN
    fi
    local base_segment="${base_color}(\u@\h:${YELLOW}\w${base_color})${NONE} "

    # Build the Git branch segment (only in a local Git repository)
    # Note: Use Git prompt functions defined in git-prompt.sh
    local branch_name=$(__git_ps1 "%s")
    local branch_segment=""
    if [[ -n $branch_name ]]; then
        branch_segment="${PURPLE}(${branch_name})${NONE} "
    fi

    # Build the Python virtual environment segment (when available)
    local venv_segment=""
    if [[ -n $VIRTUAL_ENV ]]; then
        venv_segment="${BLUE}($(basename $VIRTUAL_ENV))${NONE} "
    fi

    # Combine all segments, with newline before prompt symbol line
    PS1="${base_segment}${branch_segment}${venv_segment}\n${prompt_symbol}"
}

# The contents of this variable are executed as a regular Bash command just
# before Bash displays a prompt
PROMPT_COMMAND=__set_prompt
